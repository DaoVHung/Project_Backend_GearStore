package ra.dev.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.web.bind.annotation.*;import ra.dev.model.dto.request.cart.CartCreate;import ra.dev.model.dto.request.order.OrdersCreate;import ra.dev.model.dto.request.orderDetail.OrderGetDetail;import ra.dev.model.entity.Order;import ra.dev.model.entity.OrderDetail;import ra.dev.model.entity.Product;import ra.dev.model.entity.Users;import ra.dev.model.service.*;import ra.dev.security.CustomUserDetails;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;@CrossOrigin(origins = "*")@RestController@RequestMapping("api/v1/order")public class OrderController {    @Autowired    private CartService cartService;    @Autowired    private OrderDetailService detailService;    @Autowired    private OrderService orderService;    @Autowired    private UserService userService;    @Autowired    private ProductService productService;//************************************************ Admin ********************************************************    @GetMapping("/getOrder")//    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")    public List<Order> getAllOrder() {        return orderService.findAll();    }    @GetMapping("/getOrderWait")//    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")    public List<Order> getOrderWait() {        return orderService.listStatus1();    }    @GetMapping("/getOrderConfirm")//    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")    public List<Order> getOrderConfirm() {        return orderService.listStatus2();    }    @GetMapping("/getOrderConfirmed")//    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")    public List<Order> getOrderConfirmed() {        return orderService.listStatus3();    }    @GetMapping("/getOrderFinish")//    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")    public List<Order> getOrderFinish() {        return orderService.listStatus4();    }    @PutMapping("/confirm/{orderID}")//    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")    public ResponseEntity<?> confirmOrder(@PathVariable("orderID") int orderID) {        Order order = orderService.findByID(orderID);        order.setOrderStatus(3);        orderService.saveOrUpdate(order);        return ResponseEntity.ok(" Confirm Succses !");    }    @PutMapping("/finish/{orderID}")//    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")    public ResponseEntity<?> finishOrder(@PathVariable("orderID") int orderID) {        Order order = orderService.findByID(orderID);        order.setOrderStatus(4);        orderService.saveOrUpdate(order);        return ResponseEntity.ok(" Finish Order Succses !");    }    //************************************************ User ********************************************************    @GetMapping("/us/getOrder")//    @PreAuthorize("hasRole('USER')")    public List<Order> getOrderUse() {        CustomUserDetails userDetails = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        List<Order> orderList = orderService.getOrderByUserID(userDetails.getUserId());        return orderList;    }    @GetMapping("/getListDetail/{userID}")//    @PreAuthorize("hasRole('USER')")    public ResponseEntity<?> getDetail(@PathVariable("userID") int userID) {        List<Order> listOrder = orderService.listStatus1();        boolean checkOrder = false;        Order newOrder = new Order();        for (Order orserST1 : listOrder) {            if (orserST1.getUserID().getUserId() == userID) {                checkOrder = true;                newOrder = orserST1;                break;            }        }        if (checkOrder) {            List<OrderGetDetail> getDetailList = new ArrayList<>();            for (OrderDetail detail : newOrder.getListOrderDetail()) {                OrderGetDetail getDetail = new OrderGetDetail();                getDetail.setDetailId(detail.getDetailID());                getDetail.setQuantity(detail.getQuantity());                getDetail.setProductName(detail.getProductID().getProductName());                getDetail.setPrice(detail.getPrice());                getDetail.setTotalAmount(detail.getTotalAmount());                getDetail.setOrderId(detail.getOrder().getOrderID());                getDetail.setNote(detail.getNote());                getDetail.setProductImage(detail.getProductID().getProductImg());                getDetailList.add(getDetail);            }            return ResponseEntity.status(HttpStatus.OK).body(getDetailList);        } else {            return ResponseEntity.status(HttpStatus.OK).body("");        }//        if (order == null) {////        } else {//            List<OrderGetDetail> getDetailList = new ArrayList<>();////            for (OrderDetail detail : order.getListOrderDetail()) {//                OrderGetDetail getDetail = new OrderGetDetail();//                getDetail.setDetailId(detail.getDetailID());//                getDetail.setQuantity(detail.getQuantity());//                getDetail.setProductName(detail.getProductID().getProductName());//                getDetail.setPrice(detail.getPrice());//                getDetail.setTotalAmount(detail.getTotalAmount());//                getDetail.setOrderId(detail.getOrder().getOrderID());//                getDetail.setNote(detail.getNote());//                getDetail.setProductImage(detail.getProductID().getProductImg());//                getDetailList.add(getDetail);//            }//            return ResponseEntity.status(HttpStatus.OK).body(getDetailList);//        }    }    @GetMapping("/us/getOrderHistory")//    @PreAuthorize("hasRole('USER')")    public List<Order> getOrderHistory() {        CustomUserDetails userDetails = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        List<Order> orderList = orderService.getOrderConfirm(userDetails.getUserId());        return orderList;    }    // Thêm order detail vào list orderDtail của order theo id người dùng    @PostMapping("/addToCart")//    @PreAuthorize("hasRole('USER')")    public OrderDetail addToCart(@RequestBody CartCreate cartCreate) {        OrderDetail detail = new OrderDetail();        Users users = userService.findByID(cartCreate.getUserID());        List<Order> listOrder = orderService.listStatus1();        boolean checkOrder = false;        Order newOrder = new Order();        for (Order orserST1 : listOrder) {            if (orserST1.getUserID().getUserId() == cartCreate.getUserID()) {                checkOrder = true;                newOrder = orserST1;                break;            }        }        if (checkOrder) {            Product product = productService.findByID(cartCreate.getProductID());            boolean check = false;            OrderDetail orderDetailUpdate = new OrderDetail();            for (OrderDetail orderDetail : newOrder.getListOrderDetail()) {                if (orderDetail.getProductID().getProductID() == product.getProductID()) {                    check = true;                    orderDetailUpdate = orderDetail;                    break;                }            }            if (check) {                orderDetailUpdate.setOrder(newOrder);                orderDetailUpdate.setProductID(product);                orderDetailUpdate.setQuantity(orderDetailUpdate.getQuantity() + cartCreate.getQuantity());                orderDetailUpdate.setNote(cartCreate.getNote());                orderDetailUpdate.setTotalAmount(orderDetailUpdate.getTotalAmount() + cartCreate.getQuantity() * (product.getPrice() * (100 - product.getDiscount()) / 100));                detailService.saveOrUpdate(orderDetailUpdate);                return detailService.saveOrUpdate(orderDetailUpdate);            } else {                detail.setOrder(newOrder);                detail.setProductID(product);                detail.setQuantity(cartCreate.getQuantity());                detail.setPrice(product.getPrice());                detail.setNote(cartCreate.getNote());                detail.setTotalAmount(cartCreate.getQuantity() * (product.getPrice() * (100 - product.getDiscount()) / 100));                detailService.saveOrUpdate(detail);            }        } else {            Order order = new Order();            order.setUserID(users);            order.setOrderStatus(1);            Order order1 = orderService.saveOrUpdate(order);            Product product = productService.findByID(cartCreate.getProductID());            detail.setOrder(order1);            detail.setProductID(product);            detail.setQuantity(cartCreate.getQuantity());            detail.setPrice(product.getPrice());            detail.setNote(cartCreate.getNote());            detail.setTotalAmount(cartCreate.getQuantity() * (product.getPrice() * (100 - product.getDiscount()) / 100));            detailService.saveOrUpdate(detail);        }//        Order findByIdUser = orderService.findByIDUser(users.getUserId());////        if (findByIdUser != null) {//            if (findByIdUser.getUserID().getUserId() == users.getUserId()) {////                Product product = productService.findByID(cartCreate.getProductID());//                boolean check = false;//                OrderDetail orderDetailUpdate = new OrderDetail();//                for (OrderDetail orderDetail : findByIdUser.getListOrderDetail()) {//                    if (orderDetail.getProductID().getProductID() == product.getProductID()) {//                        check = true;//                        orderDetailUpdate = orderDetail;//                        break;//                    }////                }//                if (check) {//                    orderDetailUpdate.setOrder(findByIdUser);//                    orderDetailUpdate.setProductID(product);//                    orderDetailUpdate.setQuantity(orderDetailUpdate.getQuantity() + cartCreate.getQuantity());//                    orderDetailUpdate.setNote(cartCreate.getNote());//                    orderDetailUpdate.setTotalAmount(orderDetailUpdate.getTotalAmount() + cartCreate.getQuantity() * (product.getPrice() * (100 - product.getDiscount()) / 100));//                    detailService.saveOrUpdate(orderDetailUpdate);//                    return detailService.saveOrUpdate(orderDetailUpdate);//                } else {//                    detail.setOrder(findByIdUser);//                    detail.setProductID(product);//                    detail.setQuantity(cartCreate.getQuantity());//                    detail.setPrice(product.getPrice());//                    detail.setNote(cartCreate.getNote());//                    detail.setTotalAmount(cartCreate.getQuantity() * (product.getPrice() * (100 - product.getDiscount()) / 100));//                    detailService.saveOrUpdate(detail);////                }//////            } else {//                Order order = new Order();//                order.setUserID(users);//                order.setOrderStatus(1);//                Order order1 = orderService.saveOrUpdate(order);//                Product product = productService.findByID(cartCreate.getProductID());//                detail.setOrder(order1);//                detail.setProductID(product);//                detail.setQuantity(cartCreate.getQuantity());//                detail.setPrice(product.getPrice());//                detail.setNote(cartCreate.getNote());//                detail.setTotalAmount(cartCreate.getQuantity() * (product.getPrice() * (100 - product.getDiscount()) / 100));//                detailService.saveOrUpdate(detail);//            }//        } else {//            Order order = new Order();//            order.setUserID(users);//            order.setOrderStatus(1);//            Order order1 = orderService.saveOrUpdate(order);//            Product product = productService.findByID(cartCreate.getProductID());//            detail.setOrder(order1);//            detail.setProductID(product);//            detail.setQuantity(cartCreate.getQuantity());//            detail.setPrice(product.getPrice());//            detail.setNote(cartCreate.getNote());//            detail.setTotalAmount(cartCreate.getQuantity() * (product.getPrice() * (100 - product.getDiscount()) / 100));//            detailService.saveOrUpdate(detail);//        }        return detail;    }    // Khi thanh toán thì thêm thông tin người dùng vào order    @PostMapping("/checkOut")//    @PreAuthorize("hasRole('USER')")    public Order checkOut(@RequestBody OrdersCreate ordersCreate) {        Users users = userService.findByID(ordersCreate.getUserID());        List<Order> listOrder = orderService.listStatus1();        boolean checkOrder = false;        Order newOrder = new Order();        for (Order orserST1 : listOrder) {            if (orserST1.getUserID().getUserId() == ordersCreate.getUserID()) {                checkOrder = true;                newOrder = orserST1;                break;            }        }        if (checkOrder) {            newOrder.setNote(ordersCreate.getNote());            newOrder.setDate(LocalDate.now());            newOrder.setAddress(ordersCreate.getAddress());            newOrder.setEmail(ordersCreate.getEmail());            newOrder.setOrderStatus(2);            newOrder.setFullName(ordersCreate.getFullName());            newOrder.setPhoneNumber(ordersCreate.getPhone());            newOrder.setTotalAmount(ordersCreate.getTotalAmount());            newOrder.setUserID(users);            orderService.saveOrUpdate(newOrder);        }        return newOrder;    }    public Integer totalAmount(List<OrderDetail> cartList) {        Integer totalAmount = 0;        for (OrderDetail cart : cartList) {            totalAmount += cart.getTotalAmount();        }        return totalAmount;    }}